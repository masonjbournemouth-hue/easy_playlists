name: Android Play Bundle

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-aab:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Set Android SDK env
        run: |
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          mkdir -p "$HOME/android-sdk/cmdline-tools"

      - name: Prepare Android SDK / NDK
        run: |
          cd "$HOME/android-sdk/cmdline-tools"
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdtools.zip
          unzip -q cmdtools.zip
          mv cmdline-tools latest
          yes | "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" --licenses
          "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-35" \
            "build-tools;35.0.0" \
            "ndk;27.0.12077973"

      - name: Flutter pub get
        run: flutter pub get

      - name: Restore keystore from secret (into repo)
        run: |
          # Put the JKS *inside the android folder* so Gradle can always find it
          echo "$KEYSTORE_BASE64" | base64 -d > "$GITHUB_WORKSPACE/android/easyplaylists.jks"
          ls -l "$GITHUB_WORKSPACE/android/easyplaylists.jks"
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      - name: Write android/key.properties
        run: |
          cat > android/key.properties <<EOF
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=${GITHUB_WORKSPACE}/android/easyplaylists.jks
          EOF
          echo "----- key.properties (sanitized) -----"
          sed -e 's/storePassword=.*/storePassword=****/' \
              -e 's/keyPassword=.*/keyPassword=****/' \
              -e 's@storeFile=.*@storeFile=(repo)/android/easyplaylists.jks@' \
              android/key.properties

      # ----- Preflight checks -----
      - name: Verify keystore restored & passwords
        run: |
          ls -l $HOME/easyplaylists.jks
          keytool -list -v -keystore $HOME/easyplaylists.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}" | sed -n '1,20p'

      - name: Show sanitized key.properties
        run: |
          sed -e 's/storePassword=.*/storePassword=****/' \
              -e 's/keyPassword=.*/keyPassword=****/' \
              -e 's/storeFile=.*/storeFile=(redacted)/' \
              android/key.properties || true
      # ----------------------------

      - name: Flutter doctor (debug info)
        run: flutter doctor -v

      - name: Print environment (debug)
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          echo "ANDROID_HOME=$ANDROID_HOME"
          ls -la $HOME
          ls -la android || true
          ls -la android/app || true

      - name: Print repo layout (debug)
        run: |
          pwd
          ls -la
          ls -la android || true
          ls -la android/app || true

      - name: Flutter doctor (debug info)
        run: flutter doctor -v

      - name: Build AAB (release, light flags)
        run: flutter build appbundle --release --no-shrink --no-tree-shake-icons

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: build/app/outputs/bundle/release/app-release.aab
