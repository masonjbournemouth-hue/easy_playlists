name: Android Play Bundle

on:
  workflow_dispatch:
    inputs:
      track:
        description: "Play track (internal, alpha, beta, production)"
        required: false
        default: "internal"
      release_status:
        description: "Release status (draft or completed)"
        required: false
        default: "completed"
  push:
    branches: [ main ]
    paths:
      - "android/**"
      - "lib/**"
      - "pubspec.yaml"
      - ".github/workflows/android-aab.yml"

defaults:
  run:
    shell: bash

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    permissions:
      contents: read
      id-token: write

    env:
      # >>>> UPDATE THIS TO MATCH YOUR APP ID <<<<
      PACKAGE_NAME: com.playlistcity.app

      # Allow either your previous secret name or the new one:
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      KEYSTORE_BASE64:         ${{ secrets.KEYSTORE_BASE64 }}

      PLAY_TRACK: ${{ github.event.inputs.track || 'internal' }}
      PLAY_RELEASE_STATUS: ${{ github.event.inputs.release_status || 'completed' }}

      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/android-sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure Gradle wrapper exists (from repo root)
        run: |
          set -eux
          test -x android/gradlew || (echo "ERROR: android/gradlew missing or not executable" && exit 1)
          chmod +x android/gradlew

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Install Android commandline-tools
        run: |
          set -eux
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -sSL -o commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-linux-12266719_latest.zip
          unzip -q commandlinetools.zip
          rm -f commandlinetools.zip
          # The zip contains a top-level 'cmdline-tools/' directory.
          # Move it to 'latest/' so the final path is .../cmdline-tools/latest/bin
          rm -rf latest || true
          mv cmdline-tools latest
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"

      - name: Check Android tools on PATH
        run: |
          set -eux
          which sdkmanager
          sdkmanager --version

      - name: Accept SDK licenses (non-interactive)
        run: |
          set +e
          yes y | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses >/dev/null
          echo "sdkmanager --licenses exit code: $?"
          set -e

      - name: Install required SDK packages
        run: |
          set -eux
          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-35" \
            "platforms;android-33" \
            "build-tools;35.0.0" \
            "cmake;3.22.1" \
            "ndk;27.0.12077973"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"

      # --- Keystore + key.properties (supports either secret name) ---
      - name: Decode keystore from secrets
        run: |
          set -eux
          B64="${ANDROID_KEYSTORE_BASE64:-$KEYSTORE_BASE64}"
          if [ -z "$B64" ]; then
            echo "ERROR: No keystore base64 secret set. Use secrets.ANDROID_KEYSTORE_BASE64 or secrets.KEYSTORE_BASE64."
            exit 1
          fi
          echo "$B64" | base64 -d > android/app/upload-keystore.jks
          ls -l android/app/upload-keystore.jks

      - name: Write key.properties (expected at android/key.properties)
        run: |
          set -eux
          : "${ANDROID_KEYSTORE_PASSWORD:?Missing secret ANDROID_KEYSTORE_PASSWORD}"
          : "${ANDROID_KEY_ALIAS:?Missing secret ANDROID_KEY_ALIAS}"
          : "${ANDROID_KEY_PASSWORD:?Missing secret ANDROID_KEY_PASSWORD}"
          cat > android/key.properties <<EOF
          storePassword=${ANDROID_KEYSTORE_PASSWORD}
          keyPassword=${ANDROID_KEY_PASSWORD}
          keyAlias=${ANDROID_KEY_ALIAS}
          storeFile=upload-keystore.jks
          EOF
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS:         ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD:      ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.32.8"
          channel: "stable"
          cache: true

      - name: flutter doctor (sanity)
        run: |
          set -eux
          flutter doctor -v
          which flutter

      - name: Write local.properties (sdk.dir + flutter.sdk)
        run: |
          set -eux
          FLUTTER_SDK="/opt/hostedtoolcache/flutter/stable-3.32.8-x64"
          printf "sdk.dir=%s\nflutter.sdk=%s\n" "$ANDROID_SDK_ROOT" "$FLUTTER_SDK" > android/local.properties
          echo "----- android/local.properties -----"
          cat android/local.properties

      - name: flutter pub get
        run: flutter pub get

      - name: Auto bump versionCode (+N) in pubspec.yaml
        run: |
          set -eux
          current=$(grep '^version:' pubspec.yaml | sed 's/.*+//')
          next=$((current + 1))
          sed -i "s/+.*/+${next}/" pubspec.yaml
          echo "✅ Bumped versionCode from +${current} to +${next}"
          grep '^version:' pubspec.yaml

      # ---------- BUILD (Flutter) ----------
      - name: Build AAB with Flutter (release, obfuscate)
        run: |
          set -eux
          flutter build appbundle --release --obfuscate --split-debug-info=build/symbols

      # Verify the AAB is signed before upload (fail fast if not signed)
      - name: Verify AAB is signed
        run: |
          set -eux
          jarsigner -verify -verbose -certs build/app/outputs/bundle/release/app-release.aab

      # Optional: Upload build logs/artifacts (kept from your original file)
      - name: Upload bundle artifact
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: |
            build/app/outputs/bundle/release/app-release.aab
            android/app/build/outputs/bundle/release/app-release.aab
          if-no-files-found: warn

      # ---------- UPLOAD TO GOOGLE PLAY INTERNAL TESTING ----------
      - name: Upload to Google Play – Internal testing
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: ${{ env.PACKAGE_NAME }}
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: ${{ env.PLAY_TRACK }}
          status: ${{ env.PLAY_RELEASE_STATUS }}
          whatsNewDirectory: fastlane/metadata/android
