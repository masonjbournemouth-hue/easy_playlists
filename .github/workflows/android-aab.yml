name: Android Play Bundle

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "android/**"
      - "lib/**"
      - "pubspec.yaml"
      - ".github/workflows/android-aab.yml"

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/android-sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure Gradle wrapper exists (from repo root)
        run: |
          set -eux
          test -x android/gradlew || (echo "ERROR: android/gradlew missing or not executable" && exit 1)
          chmod +x android/gradlew

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Install Android commandline-tools
        run: |
          set -eux
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -sSL -o tools.zip https://dl.google.com/android/repository/commandlinetools-linux-12266719_latest.zip
          unzip -q tools.zip -d latest
          rm -f tools.zip
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/cmdline-tools/bin" >> "$GITHUB_PATH"

      - name: Accept SDK licenses (non-interactive)
        run: |
          set +e
          yes y | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses >/dev/null
          echo "sdkmanager --licenses exit code: $?"
          set -e

      - name: Install required SDK packages
        run: |
          set -eux
          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-35" \
            "platforms;android-33" \
            "build-tools;35.0.0" \
            "cmake;3.22.1" \
            "ndk;27.0.12077973"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"

      - name: Decode keystore from secrets
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          set -eux
          echo "$KEYSTORE_BASE64" | base64 -d > android/app/release-keystore.jks
          ls -l android/app/release-keystore.jks

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.32.8"
          channel: "stable"
          cache: true

      - name: flutter doctor (sanity)
        run: |
          set -eux
          flutter doctor -v
          which flutter

      - name: Write local.properties (sdk.dir + flutter.sdk)
        run: |
          set -eux
          # Use the hostedtoolcache path where flutter-action installs Flutter.
          FLUTTER_SDK="/opt/hostedtoolcache/flutter/stable-3.32.8-x64"
          printf "sdk.dir=%s\nflutter.sdk=%s\n" "$ANDROID_SDK_ROOT" "$FLUTTER_SDK" > android/local.properties
          echo "----- android/local.properties -----"
          cat android/local.properties

      - name: flutter pub get
        run: flutter pub get

      # ---------- BUILD (Flutter) ----------
      - name: Build AAB with Flutter (very verbose, never hide logs)
        id: flutter_build
        continue-on-error: true
        run: |
          set -eux
          # Start fresh logs
          : > flutter-info.log
          # Run very verbose build; keep going to allow log upload on failure
          (flutter build appbundle --release --no-shrink --no-tree-shake-icons -v 2>&1 | tee -a flutter-info.log) || echo "FLUTTER_BUILD_FAILED=1" > flutter_failed.flag
          # Try to extract first real error for quick triage
          awk '
            /(^Unhandled exception:)|(^Error: )|(^lib\/.*:\d+:\d+:)|(^Target )|(^\* Error)|(^ERROR:)/{seen=1}
            seen{print}
          ' flutter-info.log | head -n 200 > first-error.txt || true

      # ---------- BUILD (Gradle compile to generate Problems report) ----------
      - name: Build AAB with Gradle (verbose, stacktrace)
        id: gradle_build
        continue-on-error: true
        run: |
          set -eux
          # Only run the Gradle compile task to generate the Problems report and capture Java-side issues
          (cd android && ./gradlew :app:compileFlutterBuildRelease --stacktrace --warning-mode all 2>&1 | tee -a ../gradle-info.log) || true
          # Upload the problems report if it exists
          if [ -f build/reports/problems/problems-report.html ]; then
            mkdir -p artifacts
            cp build/reports/problems/problems-report.html artifacts/ || true
          fi

      - name: Upload logs and reports (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-and-report
          path: |
            flutter-info.log
            gradle-info.log
            first-error.txt
            artifacts/**
          if-no-files-found: ignore

      - name: Upload bundle artifact
        if: ${{ steps.flutter_build.outcome == 'success' && !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: |
            build/app/outputs/bundle/release/app-release.aab
            android/app/build/outputs/bundle/release/app-release.aab
          if-no-files-found: error
