name: Android Play Bundle

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "android/**"
      - "lib/**"
      - "pubspec.yaml"
      - ".github/workflows/android-aab.yml"

jobs:
  build-aab:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      # Flutter builds can be memory-hungry; these caps keep Gradle stable.
      JAVA_TOOL_OPTIONS: "-Xmx2048m -XX:MaxMetaspaceSize=512m"
      ORG_GRADLE_PROJECT_android_useAndroidX: "true"
      ORG_GRADLE_PROJECT_android_enableJetifier: "false"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      # === Single, local Android SDK (no android-actions/setup-android) ===
      - name: Prepare local Android SDK (cmdline-tools)
        shell: bash
        run: |
          set -euxo pipefail
          SDK_ROOT="$GITHUB_WORKSPACE/android-sdk"
          mkdir -p "$SDK_ROOT"
          curl -L -o /tmp/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          mkdir -p "$SDK_ROOT/cmdline-tools"
          unzip -q /tmp/cmdline-tools.zip -d "$SDK_ROOT/cmdline-tools"
          mv "$SDK_ROOT/cmdline-tools/cmdline-tools" "$SDK_ROOT/cmdline-tools/latest"
          echo "ANDROID_SDK_ROOT=$SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_HOME=$SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_SDK_HOME=$SDK_ROOT" >> $GITHUB_ENV
          echo "$SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$SDK_ROOT/emulator" >> $GITHUB_PATH
          echo "$SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH

      - name: Install Android SDK packages (non-interactive)
        shell: bash
        run: |
          set -euxo pipefail
          SDK_ROOT="$ANDROID_SDK_ROOT"
          SDKMGR="$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          "$SDKMGR" --sdk_root="$SDK_ROOT" \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            "cmake;3.22.1" \
            "ndk;27.0.12077973"

      - name: Accept SDK licenses (with retries)
        shell: bash
        run: |
          set -euxo pipefail
          SDK_ROOT="$ANDROID_SDK_ROOT"
          SDKMGR="$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          say_yes() { python - <<'PY'
import sys
for _ in range(200):
    sys.stdout.write("y\n")
PY
          }
          for i in 1 2 3; do
            set +e
            say_yes | "$SDKMGR" --sdk_root="$SDK_ROOT" --licenses
            CODE=$?
            set -e
            if [ $CODE -eq 0 ]; then
              echo "All licenses accepted."
              break
            else
              echo "License acceptance attempt $i failed (exit $CODE); retrying..."
              sleep 3
            fi
          done

      # === Keystore from secrets ===
      - name: Write release keystore
        shell: bash
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          set -euxo pipefail
          test -n "$KEYSTORE_BASE64"
          echo "$KEYSTORE_BASE64" | base64 -d > android/app/release-keystore.jks
          ls -l android/app/release-keystore.jks

      - name: Flutter pub get
        run: flutter pub get

      # Build AAB â€” Gradle will read signing from android/app/build.gradle (env vars)
      - name: Build AAB (release)
        shell: bash
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          set -euxo pipefail
          flutter build appbundle --release --no-tree-shake-icons

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: build/app/outputs/bundle/release/app-release.aab
